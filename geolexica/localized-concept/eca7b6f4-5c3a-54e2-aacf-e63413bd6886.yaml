data:
  _revisions:
    current: b160c9
    tree:
      b160c9:
        author:
          email: glossarist@ribose.com
          name: Glossarist bot
        object:
          authoritative_source:
            link: https://www.iso.org/standard/40601.html
            ref: ISO 19132:2007
          country_code: swe
          date_accepted: '2007-10-15T00:00:00.000Z'
          definition: '<inom informationsteknik> sammankoppling av informationssystem

            med hjälp av datautbyte'
          entry_status: valid
          examples: []
          id: 660
          language_code: swe
          lineage_source: (Type reference to national language document)
          notes:
          - Compare with integration. While the conceptual schema of the information
            transferred shall be agreed upon to some level, coupling applications
            can be and are usually flexible in the data representation of that information
            as long as the semantics content is correct and mappable to some canonical
            representation of the conceptual schema. The most common mapping technology
            used for XML messages is XSLT, and the transformation stylesheet can be
            supplied either by the service broker or by the service provider. It is
            considered a best practice for a service provider to supply his functionality
            through several logically equivalent messaging APIs, each represented
            by a different URI linked to an XSLT transformation bridge, and implemented
            by the same internal code.
          - Loose coupling and tight coupling are not at present well-defined terms
            in the literature. Generally, "tight" coupling means that there is some
            sort of incurred dependency between requester and responder in the use
            of the interface, while "loose" means no such dependency. The nature of
            that dependency is not consistently defined between authors.  In that
            light, "tight" coupling or "tight" integration are both bad practices,
            and have been viewed as such since the inception of the terms. Some literature
            refers to integration as "tight coupling", but that is a less accurate
            description.
          release: '1'
          review_indicator: ''
          terms:
          - !!python/object/new:benedict.dicts.benedict
            dictitems:
              designation: (samman)koppling
              normative_status: preferred
              type: expression
            state:
              _dict:
                designation: (samman)koppling
                normative_status: preferred
                type: expression
              _keyattr_dynamic: false
              _keyattr_enabled: true
              _keypath_separator: /
              _pointer: true
        parents: []
        timeCreated: '2007-10-15T00:00:00.000Z'
  authoritativeSource:
  - !!python/object:benedict.dicts.benedict
    _dict: {}
    _keyattr_dynamic: false
    _keyattr_enabled: true
    _keypath_separator: /
    _pointer: true
  country_code: swe
  dates:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      date: '2007-10-15T00:00:00.000Z'
      type: accepted
    state:
      _dict:
        date: '2007-10-15T00:00:00.000Z'
        type: accepted
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  definition: '[{''content'': ''<inom informationsteknik> sammankoppling av informationssystem\nmed
    hjälp av datautbyte''}]'
  examples: []
  id: 660
  language_code: swe
  notes:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      content: Compare with integration. While the conceptual schema of the information
        transferred shall be agreed upon to some level, coupling applications can
        be and are usually flexible in the data representation of that information
        as long as the semantics content is correct and mappable to some canonical
        representation of the conceptual schema. The most common mapping technology
        used for XML messages is XSLT, and the transformation stylesheet can be supplied
        either by the service broker or by the service provider. It is considered
        a best practice for a service provider to supply his functionality through
        several logically equivalent messaging APIs, each represented by a different
        URI linked to an XSLT transformation bridge, and implemented by the same internal
        code.
    state:
      _dict:
        content: Compare with integration. While the conceptual schema of the information
          transferred shall be agreed upon to some level, coupling applications can
          be and are usually flexible in the data representation of that information
          as long as the semantics content is correct and mappable to some canonical
          representation of the conceptual schema. The most common mapping technology
          used for XML messages is XSLT, and the transformation stylesheet can be
          supplied either by the service broker or by the service provider. It is
          considered a best practice for a service provider to supply his functionality
          through several logically equivalent messaging APIs, each represented by
          a different URI linked to an XSLT transformation bridge, and implemented
          by the same internal code.
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      content: Loose coupling and tight coupling are not at present well-defined terms
        in the literature. Generally, "tight" coupling means that there is some sort
        of incurred dependency between requester and responder in the use of the interface,
        while "loose" means no such dependency. The nature of that dependency is not
        consistently defined between authors.  In that light, "tight" coupling or
        "tight" integration are both bad practices, and have been viewed as such since
        the inception of the terms. Some literature refers to integration as "tight
        coupling", but that is a less accurate description.
    state:
      _dict:
        content: Loose coupling and tight coupling are not at present well-defined
          terms in the literature. Generally, "tight" coupling means that there is
          some sort of incurred dependency between requester and responder in the
          use of the interface, while "loose" means no such dependency. The nature
          of that dependency is not consistently defined between authors.  In that
          light, "tight" coupling or "tight" integration are both bad practices, and
          have been viewed as such since the inception of the terms. Some literature
          refers to integration as "tight coupling", but that is a less accurate description.
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  release: '1'
  review_indicator: ''
  sources:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      origin: &id001
        link: https://www.iso.org/standard/40601.html
        ref: ISO 19132:2007
      type: authoritative
    state:
      _dict:
        origin: *id001
        type: authoritative
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      origin: &id002
        ref: (Type reference to national language document)
      type: lineage
    state:
      _dict:
        origin: *id002
        type: lineage
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  terms:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      designation: (samman)koppling
      normative_status: preferred
      type: expression
    state:
      _dict:
        designation: (samman)koppling
        normative_status: preferred
        type: expression
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
dateAccepted: 2023-04-08
id: eca7b6f4-5c3a-54e2-aacf-e63413bd6886
status: valid
