data:
  _revisions:
    current: c65844
    tree:
      c65844:
        author:
          email: glossarist@ribose.com
          name: Glossarist bot
        object:
          authoritative_source:
            clause: (E), 3.102
            link: https://www.iso.org/standard/66175.html
            ref: ISO 19107:2019
          date_accepted: '2019-12-02T00:00:00.000Z'
          definition: conversion of one type of value to a value of a different type
            with similar content
          entry_status: valid
          examples: []
          id: 2255
          language_code: eng
          notes:
          - Point and DirectPosition are informationally identical (related to each
            other in a one to one fashion) in this context. Given a DirectPosition,
            a Point can be constructed. Given a Point, a DirectPosition can be derived
            from of its coordinates. If coercion is supported, a Point may be used
            where a DirectPosition is requested, and vice versa. Most programming
            languages use coercion, but others use "cast" operators (a type of constructor)
            requiring the programmer to initiate the coercion. "Strong substantiality"
            is related in that a subtype instance can always be coerced to any of
            its supertypes.
          release: '5'
          review_date: '2019-12-02T00:00:00.000Z'
          review_decision: accepted
          review_decision_date: '2019-12-02T00:00:00.000Z'
          review_decision_event: Normal ISO processing
          review_decision_notes: Publication of document ISO 19107:2019(E)
          review_status: final
          terms:
          - !!python/object/new:benedict.dicts.benedict
            dictitems:
              designation: type coercion <programming>
              normative_status: preferred
              type: expression
            state:
              _dict:
                designation: type coercion <programming>
                normative_status: preferred
                type: expression
              _keyattr_dynamic: false
              _keyattr_enabled: true
              _keypath_separator: /
              _pointer: true
        parents: []
        timeCreated: '2019-12-02T00:00:00.000Z'
  authoritativeSource:
  - !!python/object:benedict.dicts.benedict
    _dict: {}
    _keyattr_dynamic: false
    _keyattr_enabled: true
    _keypath_separator: /
    _pointer: true
  dates:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      date: '2019-12-02T00:00:00.000Z'
      type: accepted
    state:
      _dict:
        date: '2019-12-02T00:00:00.000Z'
        type: accepted
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  definition: '[{''content'': ''conversion of one type of value to a value of a different
    type with similar content''}]'
  examples: []
  id: 2255
  language_code: eng
  notes:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      content: Point and DirectPosition are informationally identical (related to
        each other in a one to one fashion) in this context. Given a DirectPosition,
        a Point can be constructed. Given a Point, a DirectPosition can be derived
        from of its coordinates. If coercion is supported, a Point may be used where
        a DirectPosition is requested, and vice versa. Most programming languages
        use coercion, but others use "cast" operators (a type of constructor) requiring
        the programmer to initiate the coercion. "Strong substantiality" is related
        in that a subtype instance can always be coerced to any of its supertypes.
    state:
      _dict:
        content: Point and DirectPosition are informationally identical (related to
          each other in a one to one fashion) in this context. Given a DirectPosition,
          a Point can be constructed. Given a Point, a DirectPosition can be derived
          from of its coordinates. If coercion is supported, a Point may be used where
          a DirectPosition is requested, and vice versa. Most programming languages
          use coercion, but others use "cast" operators (a type of constructor) requiring
          the programmer to initiate the coercion. "Strong substantiality" is related
          in that a subtype instance can always be coerced to any of its supertypes.
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  release: '5'
  reviewDate: 2019-12-02
  reviewDecisionDate: 2019-12-02
  reviewDecisionEvent: Normal ISO processing
  review_decision: accepted
  review_decision_notes: Publication of document ISO 19107:2019(E)
  review_status: final
  sources:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      origin: &id001
        clause: (E), 3.102
        link: https://www.iso.org/standard/66175.html
        ref: ISO 19107:2019
      type: authoritative
    state:
      _dict:
        origin: *id001
        type: authoritative
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
  terms:
  - !!python/object/new:benedict.dicts.benedict
    dictitems:
      designation: type coercion <programming>
      normative_status: preferred
      type: expression
    state:
      _dict:
        designation: type coercion <programming>
        normative_status: preferred
        type: expression
      _keyattr_dynamic: false
      _keyattr_enabled: true
      _keypath_separator: /
      _pointer: true
dateAccepted: 2023-04-08
id: 49b01eea-8f84-5367-8136-e12b85d27f41
status: valid
