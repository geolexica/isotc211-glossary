---
data:
  identifier: '312'
  localized_concepts:
    eng: 104c292b-c162-58b2-80ad-163238a10144
    ara: 5f66f5fa-0402-5e6e-aa6f-1dede499cd35
    zho: e47266dd-659b-538d-952d-b4f0d79a4282
    fin: 598b8ed9-e1bc-5899-a802-9c506135f9d3
    fra: 19a1eec6-5824-5d64-843e-04bff895827e
    deu: ab77db05-e3bd-5d36-bd50-9f241851216d
    kor: 3c5b1766-8fc0-592b-9034-4e8ac93d7a86
    rus: c8972d7a-203d-5f1b-94cd-ba55f86e7db3
    spa: 4fd5e18b-1b39-5f04-8cb5-11b3c00d4a5f
    swe: 760cb1ae-e90c-5be7-b784-f5fff533f86a
id: 8c5c54a2-95e7-53bc-a2db-b1569d75034a
date_accepted: '2003-05-01T00:00:00+05:00'
status: valid

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: entity with a well defined boundary and identity that encapsulates state
      and behaviour
  examples: []
  id: '312'
  notes:
  - content: This term was first used in this way in the general theory of object
      oriented programming, and later adopted for use in this same sense in UML. An
      object is an instance of a class. Attributes and relationships represent state.
      Operations, methods, and state machines represent behavior.
  release: '1.0'
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  - origin:
      ref: ISO 19107:2003
    status: unspecified
    type: lineage
  terms:
  - type: expression
    normative_status: preferred
    designation: object
  language_code: eng
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: 104c292b-c162-58b2-80ad-163238a10144

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: كيان ذو حدود واضحة المعالم وهوية تنطوي على حالة وسلوك
  examples: []
  id: '312'
  notes:
  - content: استخدم هذا المصطلح بهذه الطريقة للمرة الأولى في النظرية العامة للبرمجة
      الموجهة لهدف ، وتم تبنيه لاحقا للاستعمال بهذا المعنى في لغةUML. الغرض أو الكيان
      هو عبارة عن مثال لفئة. البيانات الوصفية والعلاقات تمثل الحالة. أما العمليات
      , والطرق , وآليات الحالة فتمثل السلوك أو التصرف .
  release: '1.0'
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  terms:
  - type: expression
    normative_status: preferred
    designation: كائن
  language_code: ara
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: 5f66f5fa-0402-5e6e-aa6f-1dede499cd35

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: 具有明确定义的边界与标识，封装了状态与行为的实体。
  examples: []
  id: '312'
  notes:
  - content: 状态由属性和关联表示。行为由操作、方法和状态机表示。对象是类的实例。参见：类、实例。
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  terms:
  - type: expression
    normative_status: preferred
    designation: 对象<UML>
  language_code: zho
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: e47266dd-659b-538d-952d-b4f0d79a4282

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: tietojärjestelmässä yksilöitävissä oleva kokonaisuus, jolla on tila ja
      käyttäytyminen
  examples: []
  id: '312'
  notes:
  - content: Termiä objekti käytettiin tässä merkityksessä alun perin objektiorientoituneen
      ohjelmoinnin yleisessä teoriassa, ja myöhemmin termi otettiin käyttöön samassa
      merkityksessä UML:ssä. Objekti on luokan ilmentymä. "Tila" viittaa attribuutteihin
      ja suhteisiin, "käyttäytyminen" taas operaatioihin, metodeihin ja tilakoneisiin.
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  - origin:
      ref: 'Sanastokeskus TSK: Geoinformatiikan sanasto (TSK 42), 2011'
    type: lineage
  terms:
  - type: expression
    normative_status: preferred
    designation: objekti
  - type: expression
    designation: olio
  language_code: fin
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: 598b8ed9-e1bc-5899-a802-9c506135f9d3

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: entité avec une frontière bien définie et une identité, qui encapsule
      l'état et le comportement
  examples: []
  id: '312'
  notes: []
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  - origin:
      ref: ISO 19107
    status: unspecified
    type: lineage
  terms:
  - type: expression
    normative_status: preferred
    designation: objet
  language_code: fra
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: 19a1eec6-5824-5d64-843e-04bff895827e

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: Einheit mit einer wohldefinierten Grenze und Identität, die Zustand und
      Verhalten einschließt
  examples: []
  id: '312'
  notes:
  - content: This term was first used in this way in the general theory of object
      oriented programming, and later adopted for use in this same sense in UML. An
      object is an instance of a class. Attributes and relationships represent state.
      Operations, methods, and state machines represent behavior.
  release: '1.0'
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  terms:
  - type: expression
    normative_status: preferred
    designation: Objekt
  language_code: deu
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: ab77db05-e3bd-5d36-bd50-9f241851216d

---
data:
  dates:
  - date: '2009-12-29T00:00:00+05:00'
    type: accepted
  definition:
  - content: 상태와 행태를 캡슐화한 잘 정의된 경계와 식별특성을 갖는 개체
  examples: []
  id: '312'
  notes:
  - content: 상태는 속성과 관계에 의해 표현되고, 행태는 연산, 방법 그리고 상태 메커니즘을 통해 표현된다. 객체는 클래스의 인스턴스이다.
      클래스, 인스턴스를 참조
  release: '1.0'
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  - origin:
      ref: KS X ISO 19107
    type: lineage
  terms:
  - type: expression
    normative_status: preferred
    designation: 객체
  language_code: kor
  entry_status: valid
date_accepted: '2009-12-29T00:00:00+05:00'
id: 3c5b1766-8fc0-592b-9034-4e8ac93d7a86

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: сущность с четко  определенными границами и индивидуальностью,  инкапсулирующая
      состояние и поведение
  examples: []
  id: '312'
  notes:
  - content: Этот термин впервые был применен в общей теории объектно-ориентированного
      программирования, а позже принят для использования в UML. Объект является экземпляром
      класса. Атрибуты и отношения представляют состояние. Операции, методы и  конечные
      автоматы представляют поведение
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  - origin:
      ref: Internet
    type: lineage
  terms:
  - type: expression
    normative_status: preferred
    designation: объект
  language_code: rus
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: c8972d7a-203d-5f1b-94cd-ba55f86e7db3

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: entidad con un límite y una identidad bien definidos, que encapsula estado
      y comportamiento
  examples: []
  id: '312'
  notes:
  - content: NOTA Este término se usó por primera vez en este sentido en la teoría
      general de la programación orientada a objetos y luego se adoptó en UML para
      usarse con el mismo sentido. Un objeto es una instancia de una clase. Los atributos
      y relaciones representan el estado. Las operaciones, métodos y maquinas de estados,
      representan el comportamiento.
  release: '1.0'
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  terms:
  - type: expression
    normative_status: preferred
    designation: objeto
  language_code: spa
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: 4fd5e18b-1b39-5f04-8cb5-11b3c00d4a5f

---
data:
  dates:
  - date: '2003-05-01T00:00:00+05:00'
    type: accepted
  definition:
  - content: "(allmänt:) enstaka företeelse som är möjlig att urskilja"
  examples: []
  id: '312'
  notes:
  - content: This term was first used in this way in the general theory of object
      oriented programming, and later adopted for use in this same sense in UML. An
      object is an instance of a class. Attributes and relationships represent state.
      Operations, methods, and state machines represent behavior.
  release: '1.0'
  sources:
  - origin:
      ref: OMG/UML UML Semantics
      locality:
        type: clause
        reference_from: version 1.3, 1997.
    status: unspecified
    type: authoritative
  - origin:
      ref: ISO 19107:2003
    status: unspecified
    type: lineage
  terms:
  - type: expression
    normative_status: preferred
    designation: objekt
  language_code: swe
  entry_status: valid
date_accepted: '2003-05-01T00:00:00+05:00'
id: 760cb1ae-e90c-5be7-b784-f5fff533f86a
